{"changed":true,"filter":false,"title":"main.js","tooltip":"/client/js/main.js","value":"//блок, который исполнит вебикс когда все загрузит\nvar implementFunction = (function() {\n  var App = window.App;\n  var webix = window.webix;\n  var Backbone = window.Backbone;\n  \n  App.State = {\n    _st : [{\n      clientRoute : '',\n      segment     : '',   //user, users, group, groups, tasks, templates, finances, process, files, notes\n      filter      : {}\n    }],                   //Стек переходов пользователя по роутам\n    _ConstLen_st   : 5,   //Размер стека переходов\n    SelectedProfile : {\n      id : null,\n      type : null,  //myprofile, userprofile, groupprofile, community\n      name : null\n    },              //Данный атрибут указывает на профиль относительно которого показываются все сегменты\n    _ConstLen_lastProfileSegment: 5, //Размер стека последних просмотренных профилей\n    user             : null,     //Пользователь системы\n    viewedUser       : null,     //текущий пользователь, выбранный в списке пользователей или друзей\n    viewedGroup      : null,\n    serverRoute      : '',\n    usrCRC           : null,\n    init: function() {\n      if(this.user != null) { this.user = null; }\n      this.user = this.userModelInit();\n\n      if(this.viewedUser != null) { this.viewedUser = null; }\n      this.viewedUser = this.userModelInit();\n\n      if(this.viewedGroup != null) { this.viewedGroup = null; }\n      this.viewedGroup = this.groupModelInit();\n\n      this._st              = [ { clientRoute: '', segment: '' } ];\n      this.SelectedProfile  = { id: null, type:null, name:null };\n      this.serverRoute      = '';\n      this.usrCRC           = null;\n    },\n    /**\n    * setState\n    *   Функция ДОБАВЛЯЕТ новые значения в стек состояний State._st. \n    *   Стек ограничен длиной в 4 элемента, при привышении этой длины первый элемент стека State._st удаляется.\n    *   Если атрибут функции содержит не все атрибуты стека State._st, то новое значение дополняется \n    *   значениям из предыдущего состояния стека\n    * Attributes:\n    *   state - новое состояние стека\n    * Result:\n    *****************************************************************************/\n    setState: function(state) {\n      if (typeof state === 'object') {\n        var len = this._st.length;\n        if(len > this._ConstLen_st) this._st.shift();\n        len = this._st.push({ clientRoute: '', segment: '', filter: {} });\n        \n          for (var prop in this._st[len - 1]) {\n            if(state[prop] === undefined) {\n                if(len >= 2)\n                    this._st[len - 1][prop] = this._st[len - 2][prop];\n                else\n                    this._st[len - 1][prop] = null;\n            } else {\n                this._st[len - 1][prop] = state[prop];\n            }\n          }\n      }\n    },\n    /**\n    * getState\n    *   Функция ИЗВЛЕКАЕТ значения из стека состояний State._st. \n    * Attributes:\n    *   state - при пустом значении извлекается последний объект стека, \n    *   - при отрицательном числовом значении извлекается предыдущий объект стека на количество \n    *   значений указанных в атрибуте\n    *   - если указано строковое значение, то извлекается атрибут объекта стека состояний State.st \n    *   соответствующий этому ключу\n    *   step - при отрицательном числовом значении извлекается предыдущий объект стека на количество\n    *   значений указанных в атрибуте\n    * Result:\n    *   объект из стека состояний State._st { clientRoute: '', segment: '' } или значение атрибута \n    *   этого объекта\n    *****************************************************************************/\n    getState: function(state, step) {\n        if(state === undefined) {\n            return this._st[this._st.length - 1];\n        } else if(typeof state === 'number') {\n            return this._st[this._st.length - 1 + state];\n        } else if(typeof state === 'string') {\n            return this._st[step === undefined ? this._st.length - 1 : this._st.length - 1 + step][state];\n        }\n        return undefined;\n    },\n    $srvUrlChanged: function(text, data, XmlHttpRequest) {\n      var sr = App.State.serverRoute;\n      App.State.serverRoute = '';\n      if(sr === App.State.clientRoute) {\n        segmentSelector();\n      } else {\n        App.Router.navigate(sr, {trigger: true});\n      }\n    },\n    $userSuccess: function(model, response, options) {\n  \t  //при опросе состояния сервера мы получили url, который пользователь ввел отправляя запрос на сервер\n  \t  //но клиентское приложение имеет самостоятельный роут, поэтому мы должны сообщить url пользователя этому роуту\n  \t  //и если пользователь авторизирован, перейти по этому урлу, после чего сообщить серверу, что урл обработан\n  \t  \n  \t  //добавим пользователя в меню профиля сегментов\n  \t  $$('list_InnerProfile').clearAll();\n\t    $$('list_InnerProfile').add({ id: 1, name: model.get('username'), segment: 'Мой профиль', type:'myprofile', profile_id:model.get('id') });\n\t    $$('list_InnerProfile').add({ id: 2, name: 'Сообщество', segment: 'Публичные профили', type:'community' });\n\n\t\t\t$$('list_lastProfile').clearAll();\n  \t  $$('list_lastProfile').parse(model.get('lastProfileSegment'));\n  \t  \n  \t  if(App.State.SelectedProfile.id === null)\n  \t    App.State.SelectedProfile = { id: model.get('id'), type:'myprofile', name: model.get('username') };\n\n      if(App.State.serverRoute !== '') {\n    \t  var promise = webix.ajax().post('api/v1/state', { serverRoute: '' }, App.State.$srvUrlChanged);\n  \t        \n        promise.then(function(){}).fail(function(err) {\n          webix.message({type: 'error', text: err.responseText});\n        });\n      } else {\n        if(App.State.getState('segment') === '') {\n          App.Router.navigate('id' + model.id, {trigger: true});\n        } else {\n          segmentSelector();\n        }\n      }\n    },\n    $userError: function(model, xhr, options) {\n      App.State.user.set({'mainUserLogged': false}, {silent: true});\n      segmentSelector();\n      //заглушечка\n    },\n    $loadState: function(text, data) {\n      //обработка состояния полученного с сервера\n      \n      //фиксируем полученный от пользователя URL на сервере, после обработки состояния приложение\n      //перейдет по данному URL\n      App.State.serverRoute = data.json().serverRoute;\n      \n      //(сравниваем авторизации на клиенте и сервере), (хэш суммы пользователя на клиенте и сервере)\n      if(data.json().mainUserLogged) {\n        //Если пользователь авторизирован на сервере\n        \n        //(сравниваем авторизации на клиенте и сервере), (хэш суммы пользователя на клиенте и сервере)\n        if((App.State.user.get('mainUserLogged') !== data.json().mainUserLogged) || (App.State.usrCRC !== data.json().usrCRC)) {\n          App.State.user.set({'mainUserLogged': true}, {silent: true});\n\t\t      App.State.user.url = '/api/v1/users/' + data.json().id;\n          App.State.user.fetch({ success: App.State.$userSuccess, error: App.State.$userError, silent:true });\n          \n          return;\n        }\n        \n        segmentSelector();\n      } else {\n        //Если пользователь не авторизирован на сервере\n        if(App.State.user.get('mainUserLogged')) {\n          App.State.user.set({'mainUserLogged': false}, {silent: true});\n        }\n        segmentSelector();\n      }\n    },\n    $autonomeState: function(err) {\n      webix.message(err);\n      //заглушечка\n    },\n    /**\n    * segmentChange\n    *   функция вызывается при смене роута, запоминает предыдущее состояние, делает запрос состояния\n    *   с сервера, передает управление дальше в соответствии с Result\n    * Attributes:\n    *   clientRoute - url по которому переходит пользователь\n    *   segment - сегмент который отображается пользователю после перехода по url\n    * Result:\n    *   ok: $loadState - управление сменой сегмена в зависимости от состояния на сервере\n    *   error: $autonomeState - переход к автономному режиму, когда состояние от сервера не получено\n    *****************************************************************************/\n    segmentChange: function(clientRoute, segment, filter) {\n      this.setState( { clientRoute:clientRoute, segment:segment, filter:filter } );\n      //if(segmentId !== undefined)\n      //  App.State.SelectedProfile.id = segmentId;\n\n      var promise = webix.ajax().get('api/v1/state', {}, this.$loadState);\n      promise.then(function(realdata) {\n      }).fail(this.$autonomeState);\n    },\n    userModelInit: function() {\n      //Инициализируем глобальный объект пользователя со всеми настройками приложения\n      var user = new App.Models.User();\n      user.on('change', function(model, options) { \n        model.save(model.changedAttributes());\n      });\n      user.on('error', function(model, xhr, options) {});\n      \n      return user;\n    },\n    groupModelInit: function() {\n      var group = new App.Models.Group();\n      group.on('change', function(model, options) {\n        model.save(model.changedAttributes());\n      });\n      group.on('error', function(model, xhr, options) {});\n      \n      return group;\n    }\n  };\n  \n  var dataCountry = new webix.DataCollection({ \n    url:'api/v1/country'\n  });\n\n  var dataCity = new webix.DataCollection({\n    url:'api/v1/city'\n  });\n  \n  var dataFamilyStatus = new webix.DataCollection({\n    url:'api/v1/familystatus'\n  });\n\n  webix.ui({\n\t\tid:'suggestCountry', view:'suggest', data:dataCountry\n\t});\n\t\n\twebix.ui({\n\t  id:'suggestCity', view:'suggest', data:dataCity\n\t});\n\t\n\twebix.ui({\n\t  id:'suggestFamilyStatus', view:'suggest', data:dataFamilyStatus\n\t});\n\t\n// \twebix.proxy.GroupData = {\n//     $proxy: true,\n//     init: function() {\n//       //webix.extend(this, webix.proxy.offline);\n//     },\n//     load: function(view, callback) {\n//       //Добавляем id вебиксовых вьюх для синхронизации с данными\n//   \t  //важно добавлять уже после создания всех вьюх, иначе будут добавлены пустые объекты\n//       App.State.groupTreeManager.viewsAdd($$(view.config.id));\n//     }\n//   };\n  \n  webix.proxy.TaskData = {\n    $proxy: true,\n    init: function() {\n      //webix.extend(this, webix.proxy.offline);\n    },\n    load: function(view, callback) {\n      //Добавляем id вебиксовых вьюх для синхронизации с данными\n  \t  //важно добавлять уже после создания всех вьюх, иначе будут добавлены пустые объекты\n      //App.State.taskTreeManager.viewsAdd($$(view.config.id));\n    }\n  };\n\n  var offState = function() {\n    $$('multiview_Left').hide();\n    $$('multiview_Right').hide();\n\n    $$('treetable_Tasks').clearAll();\n    $$('treetable_Groups').clearAll();\n    \n    $$('toggle_HeaderMenu').setValue(0);\n    $$('toggle_HeaderOptions').setValue(0);\n    \n    $$('toolbarAutorisation').show();\n    $$('buttonAutorisationLogin').enable();\n\t  $$('buttonAutorisationRegister').enable();\n\t  \n\t  $$('tree_SegmentsSelector').unselectAll();\n  };\n\n  /**\n  * addLastProfileList\n  *   функция добавляет новый профиль в список последних просмотренных профилей (меню сегментов), \n  *   при этом при добавлении учитывает предельный размер списка в переменной _ConstLen_lastProfileSegment\n  *   и при достижении предела удаляет первый элемент и добавляет новый в конец списка,\n  *   так же функция обновляет значения в элементе интерфейса отвечающего за список просм. профилей\n  * Attributes:\n  *   newProfile - новый профиль, который добавляется в список, соответствует следующей структуре\n  *   { id: идентификатор объекта профиля, type: тип объекта профиля, name: имя профиля, segment: \n  *   какому сегменту соответствует профиль };\n  *   type следующих типов community - сообщество (публичная инфа); myprofile - профиль основного пользователя;\n  *   userprofile - профиль пользователей; groupprofile - профиль группы; и т.д.\n  * Result:\n  *****************************************************************************/  \n  var addLastProfileList = function(newProfile) {\n    var arrProfileSegment = App.State.user.get('lastProfileSegment');\n    \n    var needAdd = true;\n    for (var i = 0; i < arrProfileSegment.length; i++) \n      if(arrProfileSegment[i].id === newProfile.id) {\n        needAdd = false;\n      }\n      \n    if(needAdd) {\n      if(arrProfileSegment.length >= App.State._ConstLen_lastProfileSegment) {\n        $$('list_lastProfile').remove(arrProfileSegment[0].id);\n        arrProfileSegment.shift();\n      }\n      \n      arrProfileSegment.push(newProfile);\n      App.State.user.save();//Обновим модель основного пользователя на сервере, добавив туда элемент списка просмотренных профилей\n        \n      if(!$$('list_lastProfile').exists(newProfile.id))\n        $$('list_lastProfile').add(newProfile);\n    }\n  };\n\n\t//***************************************************************************\n\t//AFTER FETCH FUNCTIONs\n\t\n\t//Вывод данных пользовательского профиля во фрейм, после успешного получения с сервера (callback)\n  var showUserData = function(model, response, options) {\n    $$('tabview_CentralUser').show();\n    $$('tabview_CentralUser').hideProgress();\n    \n    $$('scrollview_RightUserFilter').show();\n    \n    //В основном меню выделим пункт профиля\n    if('SegmentsSelector_Profile' != $$('tree_SegmentsSelector').getSelectedId()) {\n      $$('tree_SegmentsSelector').blockEvent(); //Блокируем срабатывание события при программном выборе пункта меню\n      $$('tree_SegmentsSelector').select('SegmentsSelector_Profile'); //Программно выбираем пункт меню\n      $$('tree_SegmentsSelector').unblockEvent();\n    }      \n\n    //если отображается пользователь, то выводятся поля ввода, в противном случае только информационные\n    if(App.State.user.get('id') === App.State.viewedUser.get('id')) {\n      $$('frameProfile_user').show();\n      App.Func.loadUserPermission();        //Загрузим настройки в панель настроек доступа своего профиля\n    } else {\n      $$('frameProfile_viewedUser').show();                                   //Показываем фрейм с данными чужого профиля\n      if($$('multiview_Right').isVisible()) $$('multiview_Right').hide();     //Если панель настроек доступа видима, то скроем\n      if($$('toggle_HeaderOptions').getValue()) $$('toggle_HeaderOptions').setValue(0); //Если кнопка настроке доступа нажата, то отожмем\n      $$('toggle_HeaderOptions').disable();                                   //Заблокируем возможность нажимать кнопку открытия окна настроек доступа\n    }\n    \n    //*Обновление дерева меню*\n    //т.к. изменился профиль, то необходимо обновить дерево меню для отображения новых элементов\n  \tvar SegmentsSelector_Users = $$('tree_SegmentsSelector').getItem('SegmentsSelector_Users');\n    SegmentsSelector_Users.value = 'Друзья';\n    if(!$$('tree_SegmentsSelector').exists('SegmentsSelector_Groups'))\n  \t  $$('tree_SegmentsSelector').add({ id: 'SegmentsSelector_Groups', value: 'Группы', hidden:false, icon: 'sitemap', $css: 'products', details:'Список групп профиля' }, \n  \t    1, 'SegmentsSelector_Segments');\n    $$('tree_SegmentsSelector').refresh();\n\n    //*Заполнение атрибутов в открывшемся окне профиля*\n    App.Func.loadUserAttributes();\n  };\n\t\n  //Вывод данных профиля группы во фрейм, после успешного получения с сервера (callback)\n  var showGroupData = function(model, response, options) {\n    $$('tabview_CentralGroup').show();\n    $$('tabview_CentralGroup').hideProgress();\n    \n    $$('scrollview_RightGroupFilter').show();\n    \n    if('SegmentsSelector_Profile' != $$('tree_SegmentsSelector').getSelectedId()) {\n      $$('tree_SegmentsSelector').blockEvent(); //Блокируем срабатывание события при программном выборе пункта меню\n      $$('tree_SegmentsSelector').select('SegmentsSelector_Profile'); //Программно выбираем пункт меню\n      $$('tree_SegmentsSelector').unblockEvent();\n    }      \n\n    //*Обновление дерева меню*\n    //т.к. изменился профиль, то необходимо обновить дерево меню для отображения новых элементов\n\t  var SegmentsSelector_Users = $$('tree_SegmentsSelector').getItem('SegmentsSelector_Users');\n    SegmentsSelector_Users.value = 'Участники';\n    $$('tree_SegmentsSelector').remove('SegmentsSelector_Groups');\n    $$('tree_SegmentsSelector').refresh();    \n\n    $$('frame_GroupProfile').show();\n\n    App.Func.loadGroupAttributes();\n  };\n\t\n  var showGroupsDataAfterSuccess = function(text, data) {\n    $$(\"treetable_Groups\").parse(text);\n  };\n\n  var showGroupsDataAfterError = function(model, xhr, options) {\n\t  //заглушка\n\t};\n\n  var showTaskData = function(Tasks, response, options) {\n  };\n\n  var showUsersData= function() {\n    //Обработка показа сегмента массива пользователей, сперва верно выделим пункты меню\n    //Само нажатие нам не нужно производить, поэтому блокируем срабатывание события\n    //если фильтр по пользователю не выбран, выделяем пункт пользователей в основном меню\n    $$('tree_SegmentsSelector').blockEvent();\n    if('SegmentsSelector_Users' != $$('tree_SegmentsSelector').getSelectedId()) {\n      $$('tree_SegmentsSelector').select('SegmentsSelector_Users');\n    }\n    $$('tree_SegmentsSelector').unblockEvent();\n\n    switch(App.State.SelectedProfile.type) {\n      case 'community':\n        $$('toggle_Users_Members').hide();\n        $$('toggle_Users_Request').hide();\n        $$('toggle_Users_Invitations').hide();\n        $$('label_UsersHeader').setValues({ title:'Список всех зарегистрированных в системе людей' }, true);\n        \n        break;\n      case 'userprofile':\n        $$('toggle_Users_Members').hide();\n        $$('toggle_Users_Request').hide();\n        $$('toggle_Users_Invitations').hide();\n        $$('label_UsersHeader').setValues({ title:'Список видимых друзей ' + App.State.SelectedProfile.name }, true);\n\n        break;\n      case 'myprofile':\n        $$('toggle_Users_Members').show();\n        $$('toggle_Users_Request').show();\n        $$('toggle_Users_Invitations').show();\n        $$('label_UsersHeader').setValues({ title:'Список ваших друзей' }, true);\n        \n        break;\n      case 'groupprofile':\n        $$('toggle_Users_Members').define('label', 'Участники');\n        $$('toggle_Users_Members').refresh();\n        $$('toggle_Users_Members').show();\n        $$('toggle_Users_Request').show();\n        $$('toggle_Users_Invitations').show();\n        $$('label_UsersHeader').setValues({ title:'Список участников группы' }, true);\n        \n        break;\n    }\n\n    if($$('toggle_Users_Invitations').getValue() === 1)\n      $$('toggle_Users_Invitations').toggle();\n      \n    if($$('toggle_Users_Members').getValue() === 1)\n      $$('toggle_Users_Members').toggle();\n      \n    if($$('toggle_Users_Request').getValue() === 1)\n      $$('toggle_Users_Request').toggle();            \n    \n    if(App.State.getState('filter').all === true) {\n      $$('toggle_Users_Invitations').toggle();\n    } else {\n      if(App.State.getState('filter').request === false)\n        $$('toggle_Users_Members').toggle();\n      else\n        $$('toggle_Users_Request').toggle();\n    }\n\n    $$('frame_Users').show();\n    $$('scrollview_UsersFilter').show();\n\n    //Параметры загрузки массива пользователей передаются в обработчике событий onDataRequest \n    //компоненты dataview_Users\n    $$('dataview_Users').clearAll();\n    $$('dataview_Users').loadNext(4, 0);\n  };\n  \n\tvar loadProfileDataSuccess = function(model, response, options) {\n    var stateFilter = App.State.getState('filter');\n    var newProfile = {};\n    \n    switch(stateFilter.profiletype) {\n      case 'userprofile':\n        //если отображается пользователь, то выводятся поля ввода, в противном случае только информационные\n        if(App.State.user.get('id') === App.State.viewedUser.get('id')) {\n          App.State.SelectedProfile = { id: model.get('id'), type:'myprofile', name: model.get('username') };\n        } else {\n          //установим в состоянии приложения новый профиль\n          App.State.SelectedProfile = { id: model.get('id'), type:'userprofile', name: model.get('username') };\n          \n          //*Добавление профиля в список последних профилей*\n          newProfile = { id: model.get('id'), type:'userprofile', name: model.get('username'), segment: 'Профиль пользователя' };\n          addLastProfileList(newProfile);\n        }\n\n        if(App.State.getState('segment') === 'users')\n          showUsersData();\n        else\n          showUserData();\n\n        break;\n      case 'groupprofile':\n        //*Установим в состоянии приложения новый профиль\n        App.State.SelectedProfile = { id: model.get('id'), type:'groupprofile', name: model.get('name') };\n    \n        //*Добавление профиля в список последних профилей*\n        newProfile = { id: model.get('id'), type:'groupprofile', name: model.get('name'), segment: 'Профиль группы' };\n        addLastProfileList(newProfile);\n        \n        if(App.State.getState('segment') === 'users')\n          showUsersData();\n        else\n          showGroupData();\n          \n        break;\n    }\n\t};\n\t\n\tvar loadProfileDataError = function(model, xhr, options) {\n\t  //заглушка\n\t};\n\t\n  //***************************************************************************\n  //INTERFACE MANIPULATION\n  //segmentSelector переключает состояние интерфейса в соответствии с теми сегментами, которые были\n  //установлены при обратке роутов в backbone App.Router, смена сегментов всегда сопровождается вызовом\n  //следующих функций segmengChange()->опрос состояния сервера->segmentSelector()->перерисовка интерфейса\n  var segmentSelector = function() {\n    var user = App.State.user;\n    var viewedUser = App.State.viewedUser;\n    var viewedGroup = App.State.viewedGroup;\n    \n    //если пользователь залогинился (получаем при опросе состояния сервера)\n  \tif(user.get('mainUserLogged')) {\n  \t  if(!$$('toolbarHeader').isVisible()) $$('toolbarHeader').show();\n  \t  if(!$$('toggle_HeaderOptions').isEnabled()) $$('toggle_HeaderOptions').enable();\n  \t  \n  \t  //*Установим видимость пункта меню \"Группы\"\n  \t  //$$('tree_SegmentsSelector').unselectAll();\n  \t  //var item = $$('tree_SegmentsSelector').getItem('SegmentsSelector_Groups');\n      //item.hidden = App.State.getState('segment') === 'group'?true:false;\n      //$$('tree_SegmentsSelector').updateItem('SegmentsSelector_Groups', item);\n      //$$('tree_SegmentsSelector').refresh();\n\n      var stateFilter = {};\n  \t  //Отрисовка интерфейса в зависимости от выбранного сегмента\n  \t  switch(App.State.getState('segment')) {\n        case 'user':\n          stateFilter = App.State.getState('filter');\n       \t  $$('tabview_CentralUser').showProgress({\n            type:'icon',\n            delay:200\n          });\n  \n          viewedUser.url = '/api/v1/users/' + stateFilter.id;\n          viewedUser.fetch({ success: loadProfileDataSuccess, error: loadProfileDataError, silent:true });\n\n          break;\n        case 'group':\n       \t  stateFilter = App.State.getState('filter');\n       \t  $$('tabview_CentralGroup').showProgress({\n            type:'icon',\n            delay:200\n          });\n          \n          viewedGroup.url = '/api/v1/groups/' + stateFilter.id;\n          viewedGroup.fetch({ success: loadProfileDataSuccess, error: loadProfileDataError, silent:true });\n          \n          break;\n        case 'users':\n          stateFilter = App.State.getState('filter');\n          var selectedProfileType = App.State.SelectedProfile.type === 'myprofile'?'userprofile':App.State.SelectedProfile.type;\n          \n          if( ((selectedProfileType === stateFilter.profiletype) && (App.State.SelectedProfile.id === stateFilter.id)) || (stateFilter.id === null) ) {\n            showUsersData();\n          } else {\n            switch(stateFilter.profiletype) {\n              case 'userprofile':\n              case 'myprofile':\n                viewedUser.url = '/api/v1/users/' + stateFilter.id;\n                viewedUser.fetch({ success: loadProfileDataSuccess, error: loadProfileDataError, silent:true });\n\n                break;\n              case 'groupprofile':\n                viewedGroup.url = '/api/v1/groups/' + stateFilter.id;\n                viewedGroup.fetch({ success: loadProfileDataSuccess, error: loadProfileDataError, silent:true });\n                \n                break;\n              case 'community':\n                showUsersData();\n            }\n          }\n          \n          break;\n        case 'groups':\n          //Обработаем показ сегмента групп, сперва верно выделим пункты меню\n          //Само нажатие нам не нужно производить, поэтому блокируем срабатывание события\n          //если фильтр по пользователю не выбран, выделяем пункт групп в основном меню\n          //в противном случае снимаем выделение          \n          $$('tree_SegmentsSelector').blockEvent();\n          if('SegmentsSelector_Groups' != $$('tree_SegmentsSelector').getSelectedId()) {\n            $$('tree_SegmentsSelector').select('SegmentsSelector_Groups');\n          }\n          $$('tree_SegmentsSelector').unblockEvent();\n          \n          $$('treetable_Groups').clearAll();\n          var promise = webix.ajax().get('api/v1/groups', { userId: App.State.SelectedProfile.id }, showGroupsDataAfterSuccess);\n          promise.then(function(realdata) {}).fail(showGroupsDataAfterError);\n\n          //$$('treetable_Groups').load('api/v1/groups');\n          //$$('treetable_Groups').loadNext(10, 0, null, 'api/v1/groups');\n\n          $$('frame_Groups').show();\n          $$('scrollviewRight_GroupsFilter').show();\n          \n          break;\n        case 'tasks':\n          $$('tree_SegmentsSelector').blockEvent();\n          if('SegmentsSelector_Tasks' != $$('tree_SegmentsSelector').getSelectedId()) {\n            $$('tree_SegmentsSelector').select('SegmentsSelector_Tasks');\n          }\n          $$('tree_SegmentsSelector').unblockEvent();\n          \n          $$('treetable_Tasks').clearAll();\n          \n          \n          $$('frame_Tasks').show();\n          //$$('scrollviewRight_TasksFilter').show();\n          break;\n        case 'templates':\n          // code\n          break;\n        case 'finances':\n          break;\n        case 'process':\n          // code\n          break;\n        case 'files':\n          // code\n          break;\n        case 'notes':\n          // code\n          break;\n        case 'home':\n          App.State.SelectedProfile = { id: 0, type:'community', name:'Сообщество' };\n          $$('tree_SegmentsSelector').refresh();\n          $$('frameBlank').show();\n          break;\n  \t  }\n  \t} else {\n  \t  console.log('segmentSelector: user not logged');\n\t    App.State.init();\n\t    offState();\n  \t  $$('frameCentral_Greeting').show();\n  \t} //if(App.State.user.mainUserLogged)    \n  };\n  \n  var connectionErrorShow = function(err) {\n    if(err.status === 434) {\n      //defaultState();\n      //App.Router.navigate('', {trigger: true});\n    }\n    webix.message( { type:'error', text:err.responseText } );\n  };\n\n  function parseQueryString(queryString) {\n    if (!_.isString(queryString))\n      return;\n    queryString = queryString.substring( queryString.indexOf('?') + 1);\n    var params = {};\n    var queryParts = decodeURI(queryString).split(/&/g);\n    _.each(queryParts, function(val) {\n      var parts = val.split('=');\n      if (parts.length >= 1) {\n        var val = undefined;\n        if (parts.length == 2)\n          val = parts[1];\n        params[parts[0]] = val;\n      }\n    });\n    return params;\n  }\n\n  //создадим экземпляр бакбоновского роутера, который будет управлять навигацией на сайте\n\tApp.Router = new (Backbone.Router.extend({\n\t  //слева роут, косая в скобках означает, что роут может быть как с косой чертой на конце, так и без нее\n\t  //справа функция, которая вызовется для соответствующего роута\n\t\troutes:{\n\t\t\t'login(/)':'login',\n\t\t\t'logout(/)':'logout',\n\t\t\t'register(/)':'register',\n\t\t\t'groups(/)':'groups',\n\t\t\t'tasks(/)':'tasks',\n\t\t\t'id:id(/)':'user',\n\t\t\t'gr:id(/)':'group',\n\t\t\t'users(/)':'users',\n\t\t\t'users?*query':'users',\n\t\t\t'home(/)':'home',\n\t\t\t'':'index'\n\t\t},\n\t\t//home выбрасывает в корень\n\t\thome:function() {\n\t\t  App.State.segmentChange('home', 'home');\n\t\t},\n\t\t//корень приложения\n\t\tindex:function() {\n\t\t  App.State.segmentChange('', undefined);\n\t\t},\n\t\tgroups:function() {\n\t\t  App.State.segmentChange('groups', 'groups');\n\t\t},\n\t\ttasks:function() {\n\t\t  App.State.segmentChange('tasks', 'tasks');\n\t\t},\n\t\tuser:function(id) {\n\t\t  App.State.segmentChange('id' + id, 'user', { id:id, profiletype: 'userprofile' });\n\t\t},\n\t\tgroup:function(id) {\n\t\t  App.State.segmentChange('gr' + id, 'group', { id:id, profiletype: 'groupprofile' });\n\t\t},\n\t\tusers:function(query) {\n\t\t  var url = 'users';\n\t\t  var filter = { id: null, all: true, request: false, profiletype: 'userprofile' }; //userprofile, groupprofile, community\n\t\t  \n\t\t  //для роута inTask.me/users query будет иметь значение null, \n\t\t  //этот роут должен привести к отображению всех зарегистрированных пользователей системы\n\t\t  //относительно прав видимости осн. пользователя\n\t\t  //в остальных случаях список пользователей отображается относительно просматриваемого сегмента\n\t\t  if(query !== null) {\n\t\t    var params = parseQueryString(query);\n\t\t    filter.all = false;\n\t\t    if(typeof params.id !== 'undefined') {\n\t\t      filter.id = Number(params.id);\n\t\t      url = url + '?id=' + params.id;\n\t\t    } else {\n\t\t      filter.profiletype = 'groupprofile';\n\t\t      filter.id = Number(params.gr);\n\t\t      url = url + '?gr=' + params.gr;\n\t\t    }\n\t\t    \n  \t\t  if(typeof params.request !== 'undefined') {\n  \t\t    filter.request = Boolean(params.request);\n  \t\t    url = url + '&request=' + params.request;\n  \t\t  }\n\t\t  }\n\t\t  \n\t\t  App.State.segmentChange(url, 'users', filter);\n\t\t},\n\t\tlogin:function() {\n\t\t  //App.State.clientRoute = '/login';\n\t\t  if(!App.State.user.get('mainUserLogged')) {\n\t\t    $$('frameCentral_Login').show();\n        $$('frameCentralLogin_authenticateError').setValues({src:''});\n\n\t\t    $$('buttonAutorisationLogin').disable();\n\t\t    $$('buttonAutorisationRegister').enable();\n\t\t  } else {\n\t\t    App.Router.navigate('id' + App.State.user.get('id'), {trigger: true});\n\t\t  }\n\t\t},\n\t\tlogout:function() {\n\t\t  //App.State.clientRoute = '/logout';\n      var promise = webix.ajax().put('api/v1/logout', { id: App.State.user.get('id') });\n\t        \n      promise.then(function(realdata) {\n        App.State.user.set({'mainUserLogged': false}, {silent:true});\n        App.Router.navigate('', {trigger: true});\n      }).fail(function(err){\n        connectionErrorShow(err);\n      });\n\t\t},\n\t\tregister:function() {\n\t\t  //App.State.clientRoute = '/register';\n\t\t  if(!App.State.user.get('mainUserLogged')) {\n\t\t    $$('frameCentral_Register').show();\n\t\t    $$('frameCentralRegister_authenticateError').setValues({src:''});\n\t\t    \n\t\t    $$('buttonAutorisationLogin').enable();\n\t\t    $$('buttonAutorisationRegister').disable();\n\t\t  } else {\n\t\t    App.Router.navigate('id' + App.State.user.get('id'), {trigger: true});\n\t\t  }\n\t\t}\n\t}))();\n\n  App.State.init();\n  \n  //вебикс конфигурация основного окна загруженная в экземпляр объекта вебиксового менеджера окон\n  var frameBase = new webix.ui({\n    id:'frameBase',\n    rows:[App.Frame.multiviewToolbar, \n      { cols: [App.Frame.multiview_Left, App.Frame.multiviewCentral, App.Frame.multiview_Right] }\n    ]\n  });\n\n  offState();\n\n  webix.extend($$('tabview_CentralUser'), webix.ProgressBar);\n  webix.extend($$('tabview_CentralGroup'), webix.ProgressBar);\n\n  webix.UIManager.addHotKey('enter', function() { \n    if($$('frameCentral_Register').isVisible()) {\n      App.Func.Register();\n    } else if($$('frameCentral_Login').isVisible()) {\n      App.Func.Login();\n    }\n  });\n\n  //************************************************************************************************\n  //Обработчики событий\n  $$('treetable_Groups').attachEvent('onAfterEditStart', function(id) {\n    App.State.groupstable_ItemEdited = id;\n  });\n\n  $$('treetable_Groups').attachEvent('onAfterEditStop', function(state, editor, ignoreUpdate) {\n    var ItemEdited = App.State.groupstable_ItemEdited;\n    var ItemSelected = App.State.groupstable_ItemSelected;\n    if (editor.column === 'name') {\n      if(ItemEdited != ItemSelected) {\n        this.getItem(ItemEdited).name = state.old;\n        this.updateItem(ItemEdited);\n        App.State.groupstable_ItemEdited = null;\n      } else {\n        //var selectGroup = App.State.groups.get(App.State.groupstable_ItemEdited);\n        //selectGroup.set({ 'name': state.value });\n      }\n    }\n  });\n  \n  $$('treetable_Tasks').attachEvent('onAfterEditStart', function(id) {\n    App.State.tasktable_ItemEdited = id;\n  });\n\n  $$('treetable_Tasks').attachEvent('onAfterEditStop', function(state, editor, ignoreUpdate) {\n    var ItemEdited = App.State.tasktable_ItemEdited;\n    var ItemSelected = App.State.tasktable_ItemSelected;\n    if (editor.column === 'name') {\n      if(ItemEdited != ItemSelected) {\n        this.getItem(ItemEdited).name = state.old;\n        this.updateItem(ItemEdited);\n        App.State.tasktable_ItemEdited = null;\n      } else {\n        var selectTask = App.State.tasks.get(App.State.tasktable_ItemEdited);\n        selectTask.set({ 'name': state.value });\n      }\n    }\n  }); \n  \n  var users_DataRefresh = function(data) {\n    $$('dataview_Users').parse(data);\n  };\n  \n  $$('dataview_Users').attachEvent('onDataRequest', function(start, count, callback, url) {\n    var filter = App.State.getState('filter');\n    var params = { start:start, count:count, \n        segment_id: App.State.SelectedProfile.id, \n        segment_type: App.State.SelectedProfile.type };\n    \n    if(typeof filter !== 'undefined') {\n      if(filter.id === null) params.segment_id = 0;\n    }\n    \n    webix.ajax().get('api/v1/users', params, users_DataRefresh);\n    return false;\n  });\n\n  $$('upl1').attachEvent('onUploadComplete', function(){\n    $$('avatarProfile_user').refresh();\n    $$('avatarLoaderFrame').hide();\n  });\n  \n  var dp = webix.dp('treetable_Groups');\n  dp.config.updateFromResponse = true;  \n  dp.attachEvent('onAfterSaveError', function(id, status, response, detail) {\n    // structure of status: {\n    //   id:\"id of item\",\n    //   status:\"update status\",\n    //   newid:\"new id after operation\"\n    // }\n    // Structure of details {\n    //   text:\"full text of server side response\",\n    //   data:\"webix ajax data related to the error\",\n    //   loader:\"xmlHttpRequest object related to the error\"\n    // }\n    \n    return true;\n  });\n  dp.attachEvent('onBeforeSaveError', function(id, status, response, detail) {\n    return true;//return true to ignore the error and mark item as saved\n  });  \n  dp.attachEvent('onLoadError', function(text, data, loader) {\n    return true;\n  });\n  dp.attachEvent('onBeforeInsert', function(id, object) {\n    $$('treetable_Groups').showOverlay('Добавление группы...');\n    return true;\n  });\n  dp.attachEvent('onBeforeUpdate', function(id, object) {\n    $$('treetable_Groups').showOverlay('Изменение в группе...');\n    return true;\n  });  \n  dp.attachEvent('onAfterSave', function(response, id, update) {\n    $$('treetable_Groups').hideOverlay();\n    return true;\n  });\n\n  webix.i18n.parseFormatDate = webix.Date.strToDate('%Y/%m/%d');\n  webix.event(window, 'resize', function() { frameBase.adjust(); });\n  //Backbone.history.start({pushState: true, root: \"/\"});\n  Backbone.history.start( { pushState: true } );\n});","undoManager":{"mark":99,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":605,"column":13},"end":{"row":605,"column":15},"action":"insert","lines":["''"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":14},"end":{"row":605,"column":15},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":15},"end":{"row":605,"column":16},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":16},"end":{"row":605,"column":17},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":17},"end":{"row":605,"column":18},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":14},"end":{"row":605,"column":18},"action":"remove","lines":["tree"]},{"start":{"row":605,"column":14},"end":{"row":605,"column":30},"action":"insert","lines":["treetable_Groups"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":29},"end":{"row":605,"column":30},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":28},"end":{"row":605,"column":29},"action":"remove","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":27},"end":{"row":605,"column":28},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":26},"end":{"row":605,"column":27},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":25},"end":{"row":605,"column":26},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":24},"end":{"row":605,"column":25},"action":"remove","lines":["G"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":24},"end":{"row":605,"column":25},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":25},"end":{"row":605,"column":26},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":26},"end":{"row":605,"column":27},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":27},"end":{"row":605,"column":28},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":28},"end":{"row":605,"column":29},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":31},"end":{"row":605,"column":32},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":32},"end":{"row":605,"column":33},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":33},"end":{"row":605,"column":34},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":32},"end":{"row":605,"column":34},"action":"remove","lines":["cl"]},{"start":{"row":605,"column":32},"end":{"row":605,"column":42},"action":"insert","lines":["clearAll()"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":42},"end":{"row":605,"column":43},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":42},"end":{"row":605,"column":43},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":42},"end":{"row":605,"column":43},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":10},"end":{"row":605,"column":11},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":11},"end":{"row":605,"column":12},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":10},"end":{"row":606,"column":45},"action":"remove","lines":["//$$('tabviewCentral_Task').show();"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":10},"end":{"row":606,"column":11},"action":"insert","lines":["$"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":11},"end":{"row":606,"column":12},"action":"insert","lines":["$"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":12},"end":{"row":606,"column":14},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":13},"end":{"row":606,"column":14},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":13},"end":{"row":606,"column":14},"action":"remove","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":13},"end":{"row":606,"column":15},"action":"insert","lines":["''"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":14},"end":{"row":606,"column":15},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":15},"end":{"row":606,"column":16},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":15},"end":{"row":606,"column":16},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":15},"end":{"row":606,"column":16},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":16},"end":{"row":606,"column":17},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":17},"end":{"row":606,"column":18},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":18},"end":{"row":606,"column":19},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":19},"end":{"row":606,"column":20},"action":"insert","lines":["_"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":20},"end":{"row":606,"column":21},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":21},"end":{"row":606,"column":22},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":22},"end":{"row":606,"column":23},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":23},"end":{"row":606,"column":24},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":24},"end":{"row":606,"column":25},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":26},"end":{"row":606,"column":27},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":27},"end":{"row":606,"column":28},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":29},"end":{"row":606,"column":30},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":30},"end":{"row":606,"column":31},"action":"insert","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":31},"end":{"row":606,"column":33},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":34},"end":{"row":606,"column":35},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":32},"end":{"row":606,"column":33},"action":"remove","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":31},"end":{"row":606,"column":33},"action":"remove","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":30},"end":{"row":606,"column":31},"action":"remove","lines":["w"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":29},"end":{"row":606,"column":30},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"remove","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":27},"end":{"row":606,"column":28},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":26},"end":{"row":606,"column":27},"action":"remove","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":26},"end":{"row":606,"column":28},"action":"insert","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":26},"end":{"row":606,"column":28},"action":"remove","lines":["()"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":26},"end":{"row":606,"column":27},"action":"insert","lines":[")"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":27},"end":{"row":606,"column":28},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":29},"end":{"row":606,"column":30},"action":"insert","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":29},"end":{"row":606,"column":30},"action":"remove","lines":["\\"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":29},"end":{"row":606,"column":30},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":29},"end":{"row":606,"column":30},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"remove","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":28},"end":{"row":606,"column":29},"action":"remove","lines":["s"]},{"start":{"row":606,"column":28},"end":{"row":606,"column":34},"action":"insert","lines":["show()"]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":35},"end":{"row":607,"column":0},"action":"insert","lines":["",""]},{"start":{"row":607,"column":0},"end":{"row":607,"column":10},"action":"insert","lines":["          "]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":10},"end":{"row":607,"column":52},"action":"insert","lines":["$$('scrollviewRight_GroupsFilter').show();"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":34},"end":{"row":607,"column":35},"action":"remove","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":33},"end":{"row":607,"column":34},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":32},"end":{"row":607,"column":33},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":31},"end":{"row":607,"column":32},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":30},"end":{"row":607,"column":31},"action":"remove","lines":["G"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":30},"end":{"row":607,"column":31},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":31},"end":{"row":607,"column":32},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":32},"end":{"row":607,"column":33},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":607,"column":33},"end":{"row":607,"column":34},"action":"insert","lines":["k"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":45},"end":{"row":606,"column":0},"action":"insert","lines":["",""]},{"start":{"row":606,"column":0},"end":{"row":606,"column":10},"action":"insert","lines":["          "]}]}],[{"group":"doc","deltas":[{"start":{"row":606,"column":10},"end":{"row":607,"column":0},"action":"insert","lines":["",""]},{"start":{"row":607,"column":0},"end":{"row":607,"column":10},"action":"insert","lines":["          "]}]}],[{"group":"doc","deltas":[{"start":{"row":262,"column":4},"end":{"row":262,"column":5},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":262,"column":5},"end":{"row":262,"column":6},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":811,"column":2},"end":{"row":811,"column":5},"action":"insert","lines":["// "]},{"start":{"row":812,"column":2},"end":{"row":812,"column":5},"action":"insert","lines":["// "]},{"start":{"row":813,"column":2},"end":{"row":813,"column":5},"action":"insert","lines":["// "]},{"start":{"row":815,"column":2},"end":{"row":815,"column":5},"action":"insert","lines":["// "]},{"start":{"row":816,"column":2},"end":{"row":816,"column":5},"action":"insert","lines":["// "]},{"start":{"row":817,"column":2},"end":{"row":817,"column":5},"action":"insert","lines":["// "]},{"start":{"row":818,"column":2},"end":{"row":818,"column":5},"action":"insert","lines":["// "]},{"start":{"row":819,"column":2},"end":{"row":819,"column":5},"action":"insert","lines":["// "]},{"start":{"row":820,"column":2},"end":{"row":820,"column":5},"action":"insert","lines":["// "]},{"start":{"row":821,"column":2},"end":{"row":821,"column":5},"action":"insert","lines":["// "]},{"start":{"row":822,"column":2},"end":{"row":822,"column":5},"action":"insert","lines":["// "]},{"start":{"row":823,"column":2},"end":{"row":823,"column":5},"action":"insert","lines":["// "]},{"start":{"row":824,"column":2},"end":{"row":824,"column":5},"action":"insert","lines":["// "]},{"start":{"row":825,"column":2},"end":{"row":825,"column":5},"action":"insert","lines":["// "]},{"start":{"row":826,"column":2},"end":{"row":826,"column":5},"action":"insert","lines":["// "]},{"start":{"row":827,"column":2},"end":{"row":827,"column":5},"action":"insert","lines":["// "]},{"start":{"row":828,"column":2},"end":{"row":828,"column":5},"action":"insert","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":609,"column":10},"end":{"row":609,"column":11},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":609,"column":11},"end":{"row":609,"column":12},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":811,"column":9},"end":{"row":811,"column":35},"action":"remove","lines":["treetableMytasks_Tasktable"]},{"start":{"row":811,"column":9},"end":{"row":811,"column":24},"action":"insert","lines":["treetable_Tasks"]}]}],[{"group":"doc","deltas":[{"start":{"row":815,"column":9},"end":{"row":815,"column":35},"action":"remove","lines":["treetableMytasks_Tasktable"]},{"start":{"row":815,"column":9},"end":{"row":815,"column":24},"action":"insert","lines":["treetable_Tasks"]}]}],[{"group":"doc","deltas":[{"start":{"row":262,"column":10},"end":{"row":262,"column":36},"action":"remove","lines":["treetableMytasks_Tasktable"]},{"start":{"row":262,"column":10},"end":{"row":262,"column":25},"action":"insert","lines":["treetable_Tasks"]}]}],[{"group":"doc","deltas":[{"start":{"row":262,"column":4},"end":{"row":262,"column":5},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":262,"column":4},"end":{"row":262,"column":5},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":10},"end":{"row":605,"column":11},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":605,"column":10},"end":{"row":605,"column":11},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":811,"column":2},"end":{"row":811,"column":5},"action":"remove","lines":["// "]},{"start":{"row":812,"column":2},"end":{"row":812,"column":5},"action":"remove","lines":["// "]},{"start":{"row":813,"column":2},"end":{"row":813,"column":5},"action":"remove","lines":["// "]},{"start":{"row":815,"column":2},"end":{"row":815,"column":5},"action":"remove","lines":["// "]},{"start":{"row":816,"column":2},"end":{"row":816,"column":5},"action":"remove","lines":["// "]},{"start":{"row":817,"column":2},"end":{"row":817,"column":5},"action":"remove","lines":["// "]},{"start":{"row":818,"column":2},"end":{"row":818,"column":5},"action":"remove","lines":["// "]},{"start":{"row":819,"column":2},"end":{"row":819,"column":5},"action":"remove","lines":["// "]},{"start":{"row":820,"column":2},"end":{"row":820,"column":5},"action":"remove","lines":["// "]},{"start":{"row":821,"column":2},"end":{"row":821,"column":5},"action":"remove","lines":["// "]},{"start":{"row":822,"column":2},"end":{"row":822,"column":5},"action":"remove","lines":["// "]},{"start":{"row":823,"column":2},"end":{"row":823,"column":5},"action":"remove","lines":["// "]},{"start":{"row":824,"column":2},"end":{"row":824,"column":5},"action":"remove","lines":["// "]},{"start":{"row":825,"column":2},"end":{"row":825,"column":5},"action":"remove","lines":["// "]},{"start":{"row":826,"column":2},"end":{"row":826,"column":5},"action":"remove","lines":["// "]},{"start":{"row":827,"column":2},"end":{"row":827,"column":5},"action":"remove","lines":["// "]},{"start":{"row":828,"column":2},"end":{"row":828,"column":5},"action":"remove","lines":["// "]}]}],[{"group":"doc","deltas":[{"start":{"row":828,"column":5},"end":{"row":828,"column":6},"action":"insert","lines":[" "]}]}]]},"ace":{"folds":[],"scrolltop":9400,"scrollleft":0,"selection":{"start":{"row":828,"column":6},"end":{"row":828,"column":6},"isBackwards":false},"options":{"tabSize":2,"useSoftTabs":true,"guessTabSize":false,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":14,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1427461251333}